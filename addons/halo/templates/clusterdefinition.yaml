apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: halo
  labels:
    {{- include "halo.labels" . | nindent 4 }}
spec:
  type: halo
  connectionCredential:
    username: halo
    password: "halo0root"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-halo)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-halo)"
  componentDefs:
    - name: halo
      workloadType: Replication  
      characterType: halo
      customLabelSpecs:
        - key: apps.kubeblocks.halo.patroni/scope
          value: "$(KB_CLUSTER_NAME)-$(KB_COMP_NAME)-patroni$(KB_CLUSTER_UID_POSTFIX_8)"
          resources:
            - gvk: "v1/Pod"
              selector:
                app.kubernetes.io/managed-by: kubeblocks
            - gvk: "apps/v1/StatefulSet"
              selector:
                app.kubernetes.io/managed-by: kubeblocks
      rsmSpec:
        roles:
          - name: primary
            accessMode: ReadWrite
            canVote: true
          - name: secondary
            accessMode: Readonly
            canVote: true
        roleProbe:
          customHandler:
            - image: {{ .Values.image.registry }}/{{ .Values.image.repository}}:{{.Values.image.tag}}
              command: 
                - |
                  Status=$(curl -s http://localhost:8008) && 
                  role=$(echo $Status | jq .role  | tr -d '"') &&
                  if [ "$role" = "master" ]; then echo -n  "primary"; else echo -n  "secondary"; fi
          roleUpdateMechanism: DirectAPIServerEventUpdate
          initialDelaySeconds: 60
        memberUpdateStrategy: BestEffortParallel
      configSpecs:
        - name: halo-configuration
          templateRef: halo-configuration
          constraintRef: halo-cc
          keys:
            - postgresql.conf
          namespace: {{ .Release.Namespace }}
          volumeName: halo-config
          defaultMode: 0444
      scriptSpecs:
        - name: halo-scripts
          templateRef: halo-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 0555
      service:
        ports:
          - name: tcp-halo
            port: 1921
            targetPort: tcp-halo
      volumeTypes:
        - name: data
          type: data
      switchoverSpec:
        withCandidate:
          cmdExecutorConfig:
            image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
            command:
              - /bin/bash
              - -c
            args:
              - curl -s http://$(KB_REPLICATION_PRIMARY_POD_FQDN):8008/switchover -XPOST -d '{"leader":"$(KB_REPLICATION_PRIMARY_POD_NAME)","candidate":"$(KB_SWITCHOVER_CANDIDATE_NAME)"}'
        withoutCandidate:
          cmdExecutorConfig:
            image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
            command:
              - /bin/bash
              - -c
            args:
              - curl -s http://$(KB_REPLICATION_PRIMARY_POD_FQDN):8008/switchover -XPOST -d '{"leader":"$(KB_REPLICATION_PRIMARY_POD_NAME)"}'
      podSpec:
        securityContext:
          runAsUser: 0
          fsGroup: 3000
          runAsGroup: 3000
        containers:
          - name: halo
            image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
            imagePullPolicy: {{ default .Values.image.pullPolicy "IfNotPresent" }}
            securityContext:
              runAsUser: 0
            command: 
              - /halo-scripts/setup.sh
            volumeMounts:
              - name: dshm
                mountPath: /dev/shm
              - name: data
                mountPath: {{ .Values.dataMountPath }}
              - name: halo-config
                mountPath: /var/lib/halo/conf
              - name: scripts
                mountPath: /halo-scripts
            ports:
              - name: tcp-halo
                containerPort: 1921
            env:
              - name: PGDATA
                value: /data/halo
              - name: HALOPORT
                value: "1921"
              - name: ALLOW_NOSSL
                value: "true"
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: PATRONI_KUBERNETES_POD_IP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
                value: "$(KB_PODIP):1921"
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: PATRONI_SUPERUSER_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: PATRONI_SUPERUSER_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: PATRONI_REPLICATION_USERNAME
                value: "replica"
              - name: PATRONI_REPLICATION_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: PATRONI_USER_REWIND
                value: "patroni"
              - name: PATRONI_PASSWORD_REWIND
                value: "patroni"
              - name: PATRONI_RESTAPI_CONNECT_ADDRESS
                value: "$(KB_PODIP):8008"
              - name: PATRONI_RESTAPI_LISTEN
                value: "0.0.0.0:8008"
              - name: PATRONI_ETCD3_HOST
                value: etcd-cluster-etcd:2379
              - name: PATRONI_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: PATRONI_POSTGRESQL_LISTEN
                value: '0.0.0.0:1921'
              - name: PATRONI_SCOPE
                value: "$(KB_CLUSTER_NAME)"
              - name: KUBERNETES_ROLE_LABEL
                value: "apps.kubeblocks.halo.patroni/role"
              - name: KB_POD_FQDN
                value: "$KB_POD_FQDN"
            livenessProbe:
              exec:
                command:
                  - /bin/bash 
                  - -c
                  - |
                    gosu halo psql -U halo -d halo0root -c  "select 1"
              initialDelaySeconds: 65
              periodSeconds: 3
              failureThreshold: 3
              timeoutSeconds: 5                                  
        volumes:
          - name: dshm
            emptyDir:
              medium: Memory
              {{- with .Values.shmVolume.sizeLimit }}
              sizeLimit: {{ . }}
              {{- end }}



            
      
apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: {{ include "apecloud-mysql.componentDefName" . }}
  labels:
    {{- include "apecloud-mysql.labels" . | nindent 4 }}
  annotations:
    apps.kubeblocks.io/horizontal-scale-backup-policy-template: {{ include "apecloud-mysql.hscaleBackupPolicyTemplateName" . }}
spec:
  provider: kubeblocks.io
  description: ApeCloud MySQL is a database that is compatible with MySQL syntax and achieves high availability through the utilization of the RAFT consensus protocol.
  serviceKind: mysql
  serviceVersion: 8.0.30
  services:
    - name: default
      spec:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
      roleSelector: leader
    - name: replication
      serviceName: replication
      spec:
        ports:
          - name: paxos
            port: 13306
            targetPort: paxos
      podService: true
      disableAutoProvision: true
  configs:
    - name: mysql-consensusset-config
      templateRef: {{ include "apecloud-mysql.configTplName" . }}
      constraintRef: {{ include "apecloud-mysql.configConstraintName" . }}
      volumeName: mysql-config
      namespace: {{ .Release.Namespace }}
  logConfigs:
    {{- range $name,$pattern := .Values.logConfigs }}
    - name: {{ $name }}
      filePathPattern: {{ $pattern }}
    {{- end }}
  scripts:
    - name: apecloud-mysql-scripts
      templateRef: {{ include "apecloud-mysql.cmScriptsName" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0555  # for read and execute, mysql container switched user account.
  systemAccounts:
    - name: root
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        numSymbols: 0
        letterCase: MixedCases
    - name: kbadmin
      statement: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT ALL PRIVILEGES ON *.* TO $(USERNAME);
      passwordGenerationPolicy: &defaultPasswordGenerationPolicy
        length: 16
        numDigits: 8
        numSymbols: 0
        letterCase: MixedCases
    - name: kbdataprotection
      statement: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)';GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO $(USERNAME); GRANT LOCK TABLES,RELOAD,PROCESS,REPLICATION CLIENT, SUPER,SELECT,EVENT,TRIGGER,SHOW VIEW ON *.* TO $(USERNAME);
      passwordGenerationPolicy: *defaultPasswordGenerationPolicy
    - name: kbprobe
      statement: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
      passwordGenerationPolicy: *defaultPasswordGenerationPolicy
    - name: kbmonitoring
      statement: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION CLIENT, PROCESS ON *.* TO $(USERNAME); GRANT SELECT ON performance_schema.* TO $(USERNAME);
      passwordGenerationPolicy: *defaultPasswordGenerationPolicy
    - name: kbreplicator
      statement: CREATE USER $(USERNAME) IDENTIFIED BY '$(PASSWD)'; GRANT REPLICATION SLAVE ON *.* TO $(USERNAME) WITH GRANT OPTION;
      passwordGenerationPolicy: *defaultPasswordGenerationPolicy
  roles:
    - name: leader
      serviceable: true
      writable: true
      votable: true
    - name: follower
      serviceable: true
      writable: false
      votable: true
    - name: learner
      serviceable: false
      writable: false
      votable: false
  lifecycleActions:
    roleProbe:
      builtinHandler: wesql
      periodSeconds: {{ .Values.roleProbe.periodSeconds }}
      timeoutSeconds: {{ .Values.roleProbe.timeoutSeconds }}
    switchover:
      withCandidate:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ default .Values.image.tag }}
        exec:
          command:
            - /scripts/switchover-with-candidate.sh
      withoutCandidate:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ default .Values.image.tag }}
        exec:
          command:
            - /scripts/switchover-without-candidate.sh
      scriptSpecSelectors:
        - name: apecloud-mysql-scripts
    accountProvision:
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        exec:
          command:
            - mysql
          args:
            - -u$(MYSQL_ROOT_USER)
            - -p$(MYSQL_ROOT_PASSWORD)
            - -P$(MYSQL_PORT)
            - -h$(KB_ACCOUNT_ENDPOINT)
            - -e
            - $(KB_ACCOUNT_STATEMENT)
        targetPodSelector: Role
        matchingKey: leader
  runtime:
    containers:
      - name: mysql
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command: [ "/scripts/setup.sh" ]
        env:
          - name: SERVICE_PORT
            value: "3306"
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_CONSENSUS_PORT
            value: "13306"
          - name: MYSQL_ROOT_HOST
            value: {{ .Values.auth.rootHost | default "%" | quote }}
          - name: MYSQL_ROOT_USER
            value: $(MYSQL_USER)
          - name: MYSQL_ROOT_PASSWORD
            value: $(MYSQL_PASSWORD)
          - name: MYSQL_DATABASE
            value: {{- if .Values.auth.createDatabase }} {{ .Values.auth.database | quote }}  {{- else }} "" {{- end }}
          - name: MYSQL_USER
            value: {{ .Values.auth.username | default "" | quote }}
          - name: MYSQL_PASSWORD
            value: {{ .Values.auth.password | default "" | quote }}
          - name: CLUSTER_ID
            value: {{ .Values.cluster.clusterId | default "1" | quote }}
          - name: CLUSTER_START_INDEX
            value: {{ .Values.cluster.clusterStartIndex | default "1" | quote }}
          - name: REPLICATION_USER
            value: {{ .Values.auth.replicationUser | default "replicator" | quote }}
          - name: REPLICATION_PASSWORD
            value: {{ .Values.auth.replicationPassword | default "" | quote }}
          - name: MYSQL_TEMPLATE_CONFIG
            value: {{ if .Values.cluster.templateConfig }}{{ .Values.cluster.templateConfig }}{{ end }}
          - name: MYSQL_CUSTOM_CONFIG
            value: {{ if .Values.cluster.customConfig }}{{ .Values.cluster.customConfig }}{{ end }}
          - name: MYSQL_DYNAMIC_CONFIG
            value: {{ if .Values.cluster.dynamicConfig }}{{ .Values.cluster.dynamicConfig }}{{ end }}
          - name: KB_EMBEDDED_WESQL
            value: {{ .Values.cluster.kbWeSQLImage | default "1" | quote }}
          - name: KB_MYSQL_VOLUME_DIR
            value: {{ .Values.mysqlConfigs.dataMountPath }}
          - name: KB_MYSQL_CONF_FILE
            value: "/opt/mysql/my.cnf"
          - name: KB_MYSQL_CLUSTER_UID
            value: $(KB_CLUSTER_UID)
          - name: KB_MYSQL_N
            value: $(KB_REPLICA_COUNT)
        volumeMounts:
          - mountPath: {{ .Values.mysqlConfigs.dataMountPath }}
            name: data
          - mountPath: /opt/mysql
            name: mysql-config
          - name: scripts
            mountPath: /scripts
          - name: annotations
            mountPath: /etc/annotations
        ports:
          - containerPort: 3306
            name: mysql
          - containerPort: 13306
            name: paxos
        lifecycle:
          preStop:
            exec:
              command: [ "/scripts/pre-stop.sh" ]
    volumes:
      {{- if .Values.logCollector.enabled }}
      - name: log-data
        hostPath:
          path: /var/log/kubeblocks
          type: DirectoryOrCreate
      {{- end }}
      - name: annotations
        downwardAPI:
          items:
            - path: "leader"
              fieldRef:
                fieldPath: metadata.annotations['cs.apps.kubeblocks.io/leader']
            - path: "component-replicas"
              fieldRef:
                fieldPath: metadata.annotations['apps.kubeblocks.io/component-replicas']
  sidecarContainerSpecs:
    - monitor:
        kind: metrics
        scrapeConfig:
          metricsPath: /metrics
          metricsPort: http-metrics
      name: mysql-exporter
      command: ["/scripts/exporter_start.sh"]
      env:
        - name: MYSQLD_EXPORTER_USER
          value: $(MYSQL_USER)
        - name: MYSQLD_EXPORTER_PASSWORD
          value: $(MYSQL_PASSWORD)
        - name: EXPORTER_WEB_PORT
          value: "{{ .Values.metrics.service.port }}"
      image: {{ .Values.metrics.image.registry | default .Values.image.registry }}/{{ .Values.metrics.image.repository }}:{{ default .Values.metrics.image.tag }}
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: {{ .Values.metrics.service.port }}
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      ports:
        - name: http-metrics
          containerPort: {{ .Values.metrics.service.port }}
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: {{ .Values.metrics.service.port }}
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      volumeMounts:
        - name: scripts
          mountPath: /scripts
  vars:
    - name: MYSQL_USER
      valueFrom:
        credentialVarRef:
          compDef: {{ include "apecloud-mysql.componentDefName" . }}
          name: root
          optional: false
          username: Required
    - name: MYSQL_PASSWORD
      valueFrom:
        credentialVarRef:
          compDef: {{ include "apecloud-mysql.componentDefName" . }}
          name: root
          optional: false
          password: Required
    - name: REPLICATION_ENDPOINT
      valueFrom:
        serviceVarRef:
          name: replication
          optional: true
          host: Required
          loadBalancer: Required

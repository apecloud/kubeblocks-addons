apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: {{ include "mysql.componentDefName" . }}-8.0.33-orc
  labels:
      {{- include "mysql.labels" . | nindent 4 }}
spec:
  labels:
    kubeblocks.io/ready-without-primary: "true"
  provider: kubeblocks
  description: mysql 8.0 compoent definition for Kubernetes
  serviceKind: mysql
  serviceVersion: "8.0"

  serviceRefDeclarations:
    - name: orchestrator
      serviceRefDeclarationSpecs:
        - serviceKind: orchestrator
          serviceVersion: "^*"

  services:
    - name: mysql-server
      serviceName: mysql-server
      spec:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
    - name: mysql
      serviceName: mysql
      generatePodOrdinalService: true
      spec:
        ports:
          - name: mysql
            port: 3306
            targetPort: mysql
  configs:
    - name: mysql-replication-config
      templateRef: mysql-8.0-config-template
      constraintRef: mysql-config-constraints
      volumeName: mysql-config
      namespace: {{ .Release.Namespace }}
  scripts:
    - name: mysql-scripts
      templateRef: mysql-scripts
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0555
  volumes:
    - name: data
      needSnapshot: true
  systemAccounts:
    - name: root
      initAccount: true
      passwordGenerationPolicy:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases

  roles:
    - name: primary
      serviceable: true
      writable: true
    - name: secondary
      serviceable: true
      writable: false
  lifecycleActions:
    roleProbe:
      builtinHandler: custom
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        exec:
          command:
            - /bin/bash
            - -c
            - |
              topology_info=$(/kubeblocks/orchestrator-client -c topology -i $KB_CLUSTER_NAME) || true
              if [[ $topology_info == "" ]]; then
                echo -n "secondary"
                exit 0
              fi

              first_line=$(echo "$topology_info" | head -n 1)
              cleaned_line=$(echo "$first_line" | tr -d '[]')
              old_ifs="$IFS"
              IFS=',' read -ra status_array <<< "$cleaned_line"
              IFS="$old_ifs"
              status="${status_array[1]}"
              if  [ "$status" != "ok" ]; then
                exit 0
              fi

              address_port=$(echo "$first_line" | awk '{print $1}')
              master_from_orc="${address_port%:*}"
              last_digit=${KB_POD_NAME##*-}
              self_service_name=$(echo "${KB_CLUSTER_COMP_NAME}_${KB_COMP_NAME}_${last_digit}" | tr '_' '-' | tr '[:upper:]' '[:lower:]' )
              if [ "$master_from_orc" == "${self_service_name}" ]; then
                echo -n "primary"
              else
                echo -n "secondary"
              fi
    postProvision:
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        exec:
          command:
            - bash
            - -c
            - "/scripts/mysql-orchestrator-register.sh;"
        preCondition: ComponentReady
    preTerminate:
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        exec:
          command:
            - bash
            - -c
            - "/scripts/orchestrator-client -c forget-cluster -i $KB_CLUSTER_NAME;"
    memberLeave:
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        exec:
          command:
            - /bin/sh
            - -c
            - |
              last_digit=${KB_LEAVE_MEMBER_POD_NAME##*-}
              self_service_name=$(echo "${KB_CLUSTER_COMP_NAME}_${KB_COMP_NAME}_${last_digit}" | tr '_' '-' | tr '[:upper:]' '[:lower:]' )
              /kubeblocks/orchestrator-client -c forget -i ${self_service_name}:3306
        targetPodSelector: Any
        container: mysql
  runtime:
    initContainers:
      - image: {{ .Values.image.registry | default "docker.io" }}/apecloud/mysql_audit_log:8.0.33
        command:
          - bash
          - -c
          - |
            mkdir -p {{ .Values.dataMountPath }}/{log,binlog,auditlog}
            cp /usr/lib/mysql/plugin/ {{ .Values.dataMountPath }}/plugin -r
        imagePullPolicy: {{ include "mysql.imagePullPolicy" . }}
        name: init-data
        volumeMounts:
          - mountPath: {{ .Values.dataMountPath }}
            name: data
      - command:
          - cp
          - -r
          - /usr/local/bin/curl
          - /kubeblocks/curl
        image: {{ .Values.image.registry | default "docker.io" }}/apecloud/curl-static:8.7.1
        imagePullPolicy: {{ include "mysql.imagePullPolicy" . }}
        name: init-curl
        volumeMounts:
          - mountPath: /kubeblocks
            name: kubeblocks
      - command:
          - /bin/sh
          - -c
          - |
            cp -r /usr/bin/jq /kubeblocks/jq
            cp -r /scripts/orchestrator-client /kubeblocks/orchestrator-client
        image: {{ .Values.image.registry | default "docker.io" }}/apecloud/jq:1.7.4
        imagePullPolicy: {{ include "mysql.imagePullPolicy" . }}
        name: init-jq
        volumeMounts:
          - mountPath: /kubeblocks
            name: kubeblocks
      - command:
          - cp
          - -r
          - /xtrabackup-2.4
          - /kubeblocks/xtrabackup
        image: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com/apecloud/syncer:mysql
        imagePullPolicy: {{ include "mysql.imagePullPolicy" . }}
        name: init-xtrabackup
        volumeMounts:
          - mountPath: /kubeblocks
            name: kubeblocks
    containers:
      - name: mysql
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:8.0.33
        imagePullPolicy: {{ include "mysql.imagePullPolicy" . }}
        lifecycle:
          postStart:
            exec:
              command: [ "/bin/sh", "-c", "/scripts/init-mysql-instance-for-orc.sh" ]
        command:
          - bash
          - -c
          - |
            mv {{ .Values.dataMountPath }}/plugin/audit_log.so /usr/lib64/mysql/plugin/
            rm -rf {{ .Values.dataMountPath }}/plugin
            chown -R mysql:root {{ .Values.dataMountPath }}
            skip_replica_start="OFF"
            if [ -f {{ .Values.dataMountPath }}/data/.restore_new_cluster ]; then
              skip_replica_start="ON"
            fi
            REPORT_HOST=MYSQL_ORDINAL_HOST_${KB_POD_NAME##*-}
            docker-entrypoint.sh mysqld --server-id $(( ${KB_POD_NAME##*-} + 1)) --report-host ${!REPORT_HOST} \
            --plugin-load-add=rpl_semi_sync_source=semisync_source.so \
            --plugin-load-add=rpl_semi_sync_replica=semisync_replica.so \
            --plugin-load-add=audit_log=audit_log.so \
            --log-bin={{.Values.dataMountPath}}/binlog/$(KB_POD_NAME)-bin \
            --skip-replica-start=$skip_replica_start
        volumeMounts:
          - mountPath: {{ .Values.dataMountPath }}
            name: data
          - mountPath: /etc/mysql/conf.d
            name: mysql-config
          - name: scripts
            mountPath: /scripts
          - mountPath: /kubeblocks
            name: kubeblocks
        ports:
          - containerPort: 3306
            name: mysql
        env:
          - name: PATH
            value: /kubeblocks/xtrabackup/bin:/kubeblocks/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          - name: KB_SERVICE_CHARACTER_TYPE
            value: mysql
          - name: MYSQL_INITDB_SKIP_TZINFO
            value: "1"
          - name: MYSQL_RANDOM_ROOT_PASSWORD
            value: ""
          - name: SERVICE_PORT
            value: "3306"
          - name: MYSQL_ROOT_HOST
            value: {{ .Values.auth.rootHost | default "%" | quote }}
          - name: ORC_TOPOLOGY_USER
            value: {{ .Values.orchestrator.topology.password }}
          - name: ORC_TOPOLOGY_PASSWORD
            value: {{ .Values.orchestrator.topology.password }}
          - name: HA_COMPNENT
            value: orchestrator
          - name: KB_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name

  vars:
    - name: MYSQL_ROOT_USER
      valueFrom:
        credentialVarRef:
          ## reference the current component definition name
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: root
          username: Required


    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        credentialVarRef:
          ## reference the current component definition name
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: root
          password: Required


    - name: MYSQL_PORT
      valueFrom:
        serviceVarRef:
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: mysql
          generatePodOrdinalServiceVar: true
          optional: true
          port:
            name: mysql
            option: Optional

    - name: MYSQL_ORDINAL_HOST
      valueFrom:
        serviceVarRef:
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: mysql
          generatePodOrdinalServiceVar: true
          host: Required

    - name: ORC_ENDPOINTS
      valueFrom:
        serviceRefVarRef:
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: orchestrator
          endpoint: Required

    - name: ORC_PORTS
      valueFrom:
        serviceRefVarRef:
          compDef: {{ include "mysql.componentDefName" . }}-8.0.33-orc
          name: orchestrator
          port: Required
{{ $scheme := "http" }}
{{- if .Values.tls.enabled }}
{{ $scheme = "https" }}
{{ end }}

{{ $bucketRoot := or ($.Values.bucketRoot) ($.Values.mountPath) }}

apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: minio-{{ .Chart.Version }}
spec:
  provider: ApeCloud
  description: {{ .Chart.Description }}
  serviceKind: {{ .Chart.Name }}
  serviceVersion: {{ .Chart.Version }}
  runtime:
    containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - "/bin/sh"
          - "-ce"
          - "/usr/bin/docker-entrypoint.sh minio -S {{ .Values.certsPath }} server {{ $bucketRoot }} {{- template "minio.extraArgs" . }}"
        env:
          - name: MINIO_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ template "minio.secretName" . }}
                key: accesskey
          - name: MINIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ template "minio.secretName" . }}
                key: secretkey
        volumeMounts:
          {{- if and .Values.persistence.enabled }}
          - name: export
            mountPath: {{ .Values.mountPath }}
            {{- if .Values.persistence.subPath }}
            subPath: "{{ .Values.persistence.subPath }}"
            {{- end }}
          {{- end }}
        ports:
          - name: {{ $scheme }}
            containerPort: 9000
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: {{ $scheme }}
            scheme: {{ $scheme | upper }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          tcpSocket:
            port: {{ $scheme }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          tcpSocket:
            port: {{ $scheme }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
        {{- end }}
    volumes:
      {{- if not .Values.persistence.enabled }}
      - name: export
        emptyDir: {}
      {{- end }}
      - name: minio-user
        secret:
          secretName: {{ template "minio.secretName" . }}
    serviceAccountName: {{ include "minio.serviceAccountName" . | quote }}
    {{- if and .Values.securityContext.enabled .Values.persistence.enabled }}
    securityContext:
      runAsUser: {{ .Values.securityContext.runAsUser }}
      runAsGroup: {{ .Values.securityContext.runAsGroup }}
      fsGroup: {{ .Values.securityContext.fsGroup }}
    {{- end }}
  volumes:
    {{- if .Values.persistence.enabled }}
    - name: export
      needSnapshot: false
    {{- end }}
  services:
    - name: {{ $scheme }}
      serviceName: {{ $scheme }}
      spec:
        type: ClusterIP
        {{- if not (empty .Values.service.clusterIP) }}
        clusterIP: {{ .Values.service.clusterIP }}
        {{- end }}
        ports:
          - name: {{ $scheme }}
            port: {{ .Values.service.port }}
            protocol: TCP
            {{- if (and (eq .Values.service.type "NodePort") ( .Values.service.nodePort)) }}
            nodePort: {{ .Values.service.nodePort }}
            {{- else }}
            targetPort: 9000
            {{- end }}
  scripts:
    - name: init
      templateRef: {{ template "minio.fullname" . }}-init-script
      volumeName: scripts
      namespace: {{ .Release.Namespace }}
  updateStrategy: BestEffortParallel

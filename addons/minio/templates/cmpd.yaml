apiVersion: apps.kubeblocks.io/v1
kind: ComponentDefinition
metadata:
  name: {{ include "minio.cmpdName" . }}
  labels:
    {{- include "minio.labels" . | nindent 4 }}
  annotations:
    {{- include "minio.annotations" . | nindent 4 }}
spec:
  provider: kubeblocks
  description: Minio is a High Performance Object Storage.
  serviceKind: minio
  serviceVersion: {{ .Values.defaultServiceVersion.minio }}
  replicasLimit:
    minReplicas: 2
    maxReplicas: 32
  systemAccounts:
    - name: root
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        letterCase: MixedCases
  services:
  - name: default
    spec:
      ports:
        - name: api
          port: 9000
          targetPort: api
        - name: console
          port: 9001
          targetPort: console
  configs:
    - name: config
      template: {{ include "minio.configTplName" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: minio-config
      defaultMode: 0777
      restartOnFileChange: true
  scripts:
    - name: script
      template: {{ include "minio.scriptTplName" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: minio-script
      defaultMode: 0555
  volumes:
    - name: data
      needSnapshot: true
  vars:
    - name: MINIO_ROOT_USER
      valueFrom:
        credentialVarRef:
          name: root
          optional: false
          username: Required
    - name: MINIO_ROOT_PASSWORD
      valueFrom:
        credentialVarRef:
          name: root
          optional: false
          password: Required
    - name: MINIO_COMP_REPLICAS
      valueFrom:
        componentVarRef:
          compDef: minio
          optional: false
          replicas: Required
    - name: MINIO_COMPONENT_NAME
      valueFrom:
        componentVarRef:
          compDef: minio
          optional: false
          componentName: Required
    - name: CLUSTER_NAMESPACE
      valueFrom:
        clusterVarRef:
          namespace: Required
    - name: CLUSTER_NAME
      valueFrom:
        clusterVarRef:
          clusterName: Required
    - name: CLUSTER_COMPONENT_NAME
      valueFrom:
        componentVarRef:
          compDef: minio
          optional: false
          shortName: Required
    - name: CLUSTER_DOMAIN
      value: {{ .Values.clusterDomain | quote }}
    - name: CERTS_PATH
      value: {{ .Values.certsPath | quote }}
    - name: MINIO_API_PORT
      value: {{ .Values.minioAPIPort | quote }}
    - name: MINIO_CONSOLE_PORT
      value: {{ .Values.minioConsolePort | quote}}
    - name: HTTP_PROTOCOL
      value: {{ .Values.tls.enabled | ternary "https" "http" | quote }}
  roles:
    - name: readwrite
      updatePriority: 1
      participatesInQuorum: false
    - name: notready  # a special role to hack the update strategy of its
      updatePriority: 1
      participatesInQuorum: false
  policyRules:
    - apiGroups:
        - ""
      resources:
        - configmaps
      verbs:
        - create
        - get
        - patch
  lifecycleActions:
    roleProbe:
      exec:
        command:
          - /bin/sh
          - -c
          - |
            if mc config host add minio http://127.0.0.1:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD &>/dev/null; then
              echo -n "readwrite"
            else
              echo -n "notready"
            fi
  runtime:
    initContainers:
      - name: init
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command:
          - /bin/sh
          - -ce
          - /scripts/replicas-history-config.sh
        volumeMounts:
          - name: minio-script
            mountPath: /scripts
          - name: minio-replicas-config
            mountPath: /minio-config
    containers:
      - name: minio
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command:
          - /bin/bash
          - -c
          - /scripts/startup.sh
        ports:
          - name: api
            protocol: TCP
            containerPort: {{ .Values.minioAPIPort }}
          - name: console
            protocol: TCP
            containerPort: {{ .Values.minioConsolePort }}
        env:
          - name: MINIO_ROOT_USER
            value: $(MINIO_ROOT_USER)
          - name: MINIO_ROOT_PASSWORD
            value: $(MINIO_ROOT_PASSWORD)
          - name: MINIO_BROWSER_LOGIN_ANIMATION
            value: "off"
        volumeMounts:
          - name: data
            mountPath: /data
          - name: minio-script
            mountPath: /scripts
          - name: minio-replicas-config
            mountPath: /minio-config
    volumes:
      - name: minio-replicas-config
        emptyDir: {}

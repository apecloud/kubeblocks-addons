{{ $drivesPerNode := .Values.drivesPerNode | int }}
{{ $scheme := .Values.tls.enabled | ternary "https" "http" }}
{{ $mountPath := .Values.mountPath }}
{{ $bucketRoot := or ($.Values.bucketRoot) ($.Values.mountPath) }}
{{ $subPath := .Values.persistence.subPath }}
{{ $penabled := .Values.persistence.enabled }}
{{ $accessMode := .Values.persistence.accessMode }}
{{ $storageClass := .Values.persistence.storageClass }}
{{ $psize := .Values.persistence.size }}

apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: minio
spec:
  type: minio
  connectionCredential:
    {{- if .Values.rootUser }}
    rootUser: {{ .Values.rootUser | toString | quote }}
    {{- else }}
    rootUser: "$(RANDOM_PASSWD)"
    {{- end }}
    {{- if .Values.rootPassword }}
    rootPassword: {{ .Values.rootPassword | toString | quote }}
    {{- else }}
    rootPassword: "$(RANDOM_PASSWD)"
    {{- end }}
    endpoint: "$(SVC_FQDN):$(SVC_PORT_api)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_api)"
    consoleEndpoint: "$(SVC_FQDN):$(SVC_PORT_console)"
  componentDefs:
    - name: minio
      characterType: minio
      workloadType: Stateful
      podSpec:
        containers:
          - name: {{ .Chart.Name }}
            image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command:
              - "/bin/sh"
              - "-ce"
              - "/usr/bin/docker-entrypoint.sh minio server {{ $scheme }}://$KB_CLUSTER_COMP_NAME-{0...$((KB_REPLICA_COUNT-1))}.$KB_CLUSTER_COMP_NAME-headless.$KB_NAMESPACE.svc.{{ $.Values.clusterDomain }}{{ $bucketRoot }} -S {{ .Values.certsPath }} --address :{{ .Values.minioAPIPort }} --console-address :{{ .Values.minioConsolePort }} {{- template `minio.extraArgs` . }}"
            env:
              - name: MINIO_ROOT_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: rootUser
              - name: MINIO_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: rootPassword
            volumeMounts:
              {{- if $penabled }}
              {{- if (gt $drivesPerNode 1) }}
              {{- range $i := until $drivesPerNode }}
              - name: export-{{ $i }}
                mountPath: {{ $mountPath }}-{{ $i }}
                {{- if and $penabled $subPath }}
                subPath: {{ $subPath }}
                {{- end }}
              {{- end }}
              {{- else }}
              - name: data
                mountPath: {{ $mountPath }}
                {{- if and $penabled $subPath }}
                subPath: {{ $subPath }}
                {{- end }}
              {{- end }}
              {{- end }}
              {{- if .Values.extraSecret }}
              - name: extra-secret
                mountPath: "/tmp/minio-config-env"
              {{- end }}
              {{- include "minio.tlsKeysVolumeMount" . | indent 12 }}
              {{- if .Values.extraVolumeMounts }}
                {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
              {{- end }}
            ports:
              - name: api
                containerPort: {{ .Values.minioAPIPort }}
              - name: console
                containerPort: {{ .Values.minioConsolePort }}
                        {{- if .Values.livenessProbe.enabled }}
            livenessProbe:
              httpGet:
                path: /minio/health/live
                port: api
                scheme: {{ $scheme | upper }}
              initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
              periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
              timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
              successThreshold: {{ .Values.livenessProbe.successThreshold }}
              failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            {{- end }}
            {{- if .Values.readinessProbe.enabled }}
            readinessProbe:
              tcpSocket:
                port: api
              initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
              periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
              timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
              successThreshold: {{ .Values.readinessProbe.successThreshold }}
              failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            {{- end }}
            {{- if .Values.startupProbe.enabled }}
            startupProbe:
              tcpSocket:
                port: api
              initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
              periodSeconds: {{ .Values.startupProbe.periodSeconds }}
              timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
              successThreshold: {{ .Values.startupProbe.successThreshold }}
              failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            {{- end }}
        volumes:
          {{- if not .Values.persistence.enabled }}
          - name: export
            emptyDir: {}
          {{- end }}
        serviceAccountName: {{ include "minio.serviceAccountName" . | quote }}
        {{- if and .Values.securityContext.enabled .Values.persistence.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          fsGroup: {{ .Values.securityContext.fsGroup }}
        {{- end }}
      volumeTypes:
        {{- if .Values.persistence.enabled }}
        - name: data
          type: data
        {{- end }}
      service:
        ports:
          - name: api
            port: {{ .Values.service.port }}
            protocol: TCP
            {{- if (and (eq .Values.service.type "NodePort") ( .Values.service.nodePort)) }}
            nodePort: {{ .Values.service.nodePort }}
            {{- else }}
            targetPort: {{ .Values.minioAPIPort }}
            {{- end }}
          - name: console
            port: {{ .Values.consoleService.port }}
            protocol: TCP
            {{- if (and (eq .Values.consoleService.type "NodePort") ( .Values.consoleService.nodePort)) }}
            nodePort: {{ .Values.consoleService.nodePort }}
            {{- else }}
            targetPort: {{ .Values.minioConsolePort }}
            {{- end }}
      statefulSpec:
        updateStrategy: BestEffortParallel

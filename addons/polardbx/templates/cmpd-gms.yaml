apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: polardbx-gms-{{ .Chart.Version }}
  labels:
    {{- include "polardbx.labels" . | nindent 4 }}
spec:
  provider: Community
  description: {{ .Chart.Description }}
  serviceKind: {{ .Chart.Name }}
  serviceVersion: {{ .Chart.AppVersion }}
  runtime:
    volumes:
      - emptyDir: { }
        name: xstore-tools
      - downwardAPI:
          defaultMode: 420
          items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['runmode']
              path: runmode
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
              path: name
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        name: podinfo
    initContainers:
      - name: tools-updater
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.images.polardbx.toolsUpdater.repository }}:{{.Values.images.polardbx.toolsUpdater.tag}}
        imagePullPolicy: {{ default "IfNotPresent" .Values.images.polardbx.pullPolicy }}
        command: [ "/bin/ash" ]
        args: [ "-c", "./hack/update.sh /target" ]
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
        volumeMounts:
          - name: xstore-tools
            mountPath: /target
    containers:
      - name: engine
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.images.polardbx.dn.repository}}:{{.Values.images.polardbx.dn.tag}}
        imagePullPolicy: {{ default "IfNotPresent" .Values.images.polardbx.pullPolicy }}
        command: [ "/scripts/xstore-setup.sh" ]
        lifecycle:
          postStart:
            exec:
              command:
                - /scripts/xstore-post-start.sh
                - GMS
        env:
          - name: LANG
            value: en_US.utf8
          - name: LC_ALL
            value: en_US.utf8
          - name: ENGINE
            value: galaxy
          - name: ENGINE_HOME
            value: /opt/galaxy_engine
          - name: NODE_ROLE
            value: candidate
          - name: NODE_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: LIMITS_CPU
            valueFrom:
              resourceFieldRef:
                containerName: engine
                resource: limits.cpu
                divisor: "1m"
          - name: LIMITS_MEM
            valueFrom:
              resourceFieldRef:
                containerName: engine
                resource: limits.memory
          - name: PORT_MYSQL
            value: "3306"
          - name: PORT_PAXOS
            value: "11306"
          - name: PORT_POLARX
            value: "31600"
          - name: KB_SERVICE_USER
            value: "polardbx_root"
          - name: KB_SERVICE_PASSWORD
            value: $(SERVICE_PASSWORD)
          - name: RSM_COMPATIBILITY_MODE
            value: "true"
        ports:
          - name: mysql
            containerPort: 3306
          - name: paxos
            containerPort: 11306
          - name: polarx
            containerPort: 31600
        startupProbe:
          failureThreshold: 60
          tcpSocket:
            port: mysql
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        volumeMounts:
          - name: data
            mountPath: /data/mysql
          - name: data-log
            mountPath: /data-log/mysql
          - name: xstore-tools
            mountPath: /tools/xstore
          - name: scripts
            mountPath: /scripts/xstore-post-start.sh
            subPath: xstore-post-start.sh
          - name: scripts
            mountPath: /scripts/xstore-setup.sh
            subPath: xstore-setup.sh
          - name: podinfo
            mountPath: /etc/podinfo
      - name: exporter
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.images.prom.mysqld_exporter.repository}}:{{.Values.images.prom.mysqld_exporter.tag}}
        imagePullPolicy: {{ default "IfNotPresent" .Values.images.prom.pullPolicy }}
        ports:
          - name: metrics
            containerPort: 9104
            protocol: TCP
        env:
          - name: "MYSQL_MONITOR_USER"
            value: $(SERVICE_USER)
          - name: "MYSQL_MONITOR_PASSWORD"
            value: $(SERVICE_PASSWORD)
          - name: "DATA_SOURCE_NAME"
            value: "$(MYSQL_MONITOR_USER):$(MYSQL_MONITOR_PASSWORD)@(localhost:3306)/"
  vars:
    - name: SERVICE_USER
      value: polardbx_root
    - name: SERVICE_PASSWORD
      valueFrom:
        credentialVarRef:
          name: polardbx_root
          optional: false
          password: Required
  volumes:
    - name: data
    # - name: data-log
  service:
    - name: default
      spec:
        ports:
          - name: mysql
            port: 3306
            targetPort: 3306
          - name: metrics
            port: 9104
            targetPort: 9104
  scripts:
    - name: polardbx-scripts
      templateRef: polardbx-scripts
      volumeName: scripts
      namespace: {{ .Release.Namespace }}
      defaultMode: 0555
  systemAccounts:
    - name: polardbx_root
      initAccount: true
      passwordGenerationPolicy:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
  updateStrategy: Serial
  roles:
    - name: leader
      serviceable: true
      writable: true
      votable: true
    - name: follower
      serviceable: true
      writable: false
      votable: true
  lifecycleAction:
    roleProbe:
      exec:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.roleProbe.image.repository }}:{{ .Values.roleProbe.image.tag }}
        command:
          - sh
          - -c
          - |
            mysql -h127.0.0.1 -P3306 -uroot -N -B -e "select role from information_schema.alisql_cluster_local" | xargs echo -n
      timeoutSeconds: {{ .Values.roleProbe.timeoutSeconds }}
      periodSeconds: {{ .Values.roleProbe.periodSeconds }}
      failureThreshold: {{ .Values.roleProbe.failureThreshold }}
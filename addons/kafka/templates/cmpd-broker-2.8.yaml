apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: "{{ include "kafka-broker2_8.componentDefName" . }}"
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  services:
    - name: advertised-listener
      serviceName: advertised-listener
      podService: true
      spec:
        type: ClusterIP
        ports:
          - name: broker
            port: 9092
            targetPort: kafka-client
  vars:
    - name: KAFKA_ADMIN_USER
      valueFrom:
        credentialVarRef:
          name: admin
          optional: false
          username: Required
    - name: KAFKA_ADMIN_PASSWORD
      valueFrom:
        credentialVarRef:
          name: admin
          optional: false
          password: Required
    - name: KAFKA_CLIENT_USER
      valueFrom:
        credentialVarRef:
          name: client
          optional: false
          username: Required
    - name: KAFKA_CLIENT_PASSWORD
      valueFrom:
        credentialVarRef:
          name: client
          optional: false
          password: Required
    ## Todo: currently only nodeport and clusterip network modes are supported. LoadBalance is not supported yet and needs future support.
    - name: BROKER_ADVERTISED_PORT
      valueFrom:
        serviceVarRef:
          compDef: "{{ include "kafka-broker2_8.componentDefName" . }}"
          name: advertised-listener
          optional: true
          port:
            name: broker
            option: Optional
    - name: ZOOKEEPER_POD_FQDN
      valueFrom:
        componentVarRef:
          compDef: {{ include "kafka-zookeeper.componentDefName"  . }}
          optional: true
          podFQDNs: Required
  provider: kubeblocks
  description: Kafka broker.
  serviceKind: kafka
  serviceVersion: {{ .Values.componentServiceVersion.zk_mode_kafka }}
  systemAccounts:
    - name: client
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        letterCase: MixedCases
    - name: admin
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        letterCase: MixedCases
  # TODO: accountProvision will not work now because because currently it relies on role probe to work
  # also, enable any lifecycleActions will inject lorry sidecar, which needs proper serviceaccount to work
  # lifecycleActions:
  #   accountProvision:
  #     # builtinHandler: custom
  #     customHandler:
  #       image: {{ .Values.images.registry | default "docker.io" }}/{{ .Values.images.kafka.repository }}:{{ .Values.images.kafka.tag.v2_8_2 }}
  #       exec:
  #         command:
  #           - bash
  #           - -c
  #           - |
  #             first_fqdn="{$ZOOKEEPER_POD_FQDN%%,*}"
  #             kafka-configs.sh --zookeeper $first_fqdn:$ZOOKEEPER_CLIENT_PORT --alter \
  #               --add-config "SCRAM-SHA-256=[iterations=8192,password=$KB_ACCOUNT_PASSWORD],SCRAM-SHA-512=[password=$KB_ACCOUNT_PASSWORD]" \
  #               --entity-type users --entity-name $KB_ACCOUNT_NAME

  ## serial is not used because rsm currently does not support kafka's role detection. The lack of role label during restart will affect the pod restart.
  updateStrategy: BestEffortParallel
  configs:
    - name: kafka-configuration-tpl
      constraintRef: {{ include "kafka.name" . }}-2.8-cc
      templateRef: {{ include "kafka.name" . }}-2.8-configuration-tpl
      volumeName: kafka-config
      namespace: {{ .Release.Namespace }}
    - name: {{ include "kafka.name" . }}-jmx-configuration-tpl
      templateRef: {{ include "kafka.name" . }}-jmx-configuration-tpl
      volumeName: jmx-config
      namespace: {{ .Release.Namespace }}
  scripts:
    - name: kafka-scripts-tpl
      templateRef: {{ include "kafka.name" . }}-server-scripts-tpl
      volumeName: scripts
      namespace: {{ .Release.Namespace }}
      defaultMode: 0755
    - name: kafka-scripts-tools-tpl
      templateRef: {{ include "kafka.name" . }}-scripts-tools-tpl
      volumeName: tools
      namespace: {{ .Release.Namespace }}
      defaultMode: 0755
  runtime:
    securityContext:
      fsGroup: 1001
    containers:
      - name: kafka
        imagePullPolicy: {{ default "IfNotPresent" .Values.images.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
        command:
          - /scripts/kafka-server-zk-setup.sh
        env:
          - name: BITNAMI_DEBUG
            value: {{ .Values.debugEnabled | quote }}
          - name: MY_POD_IP
            value: "$(KB_PODIP)"
            # value: "$(KB_POD_IP)"
          - name: MY_POD_NAME
            value: "$(KB_POD_NAME)"
          - name: KAFKA_ENABLE_KRAFT
            value: "no"
          - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
            value: "INTERNAL"
          - name: KAFKA_CFG_LISTENERS
            value: "INTERNAL://:9094,CLIENT://:9092"
          - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
          - name: KAFKA_CFG_ADVERTISED_LISTENERS
            # value: "INTERNAL://$(KB_POD_NAME).$(KB_CLUSTER_COMP_NAME)-headless.$(KB_NAMESPACE).svc.{{ .Values.clusterDomain }}:9094,CLIENT://$(KB_POD_NAME).$(KB_CLUSTER_COMP_NAME)-headless.$(KB_NAMESPACE).svc.{{ .Values.clusterDomain }}:9092"
            value: "INTERNAL://$(KB_POD_IP):9094,CLIENT://$(KB_POD_IP):9092"
          - name: KAFKA_CFG_INITIAL_BROKER_REGISTRATION_TIMEOUT_MS
            value: "240000"
          - name: ALLOW_PLAINTEXT_LISTENER
            value: "yes"
          - name: JMX_PORT
            value: "5555"
          - name: KAFKA_VOLUME_DIR
            value: "/bitnami/kafka"
          - name: KAFKA_CFG_METADATA_LOG_DIR
            value: "/bitnami/kafka/metadata"
          - name: KAFKA_LOG_DIR
            value: "/bitnami/kafka/data"
          - name: KAFKA_HEAP_OPTS
            #value: "-Xmx1024m -Xms1024m"
            value: "-XshowSettings:vm -XX:MaxRAMPercentage=100 -Ddepth=64"
          - name: SERVER_PROP_FILE
            value: /scripts/server.properties
          - name: KAFKA_CFG_SUPER_USERS
            value: "User:$(SUPER_USER)"
          # - name: KB_KAFKA_ENABLE_SASL  # enable the SASL with plain mode
          #   value: "true"
          - name: KB_KAFKA_SASL_CONFIG_PATH  # specify the SASL jaas users
            value: /tools/server-jaas.properties
          - name: BROKER_MIN_NODE_ID
            value: {{ .Values.kafkaBroker.minNodeId | quote }}
          - name: ZOOKEEPER_CLIENT_PORT
            value: "2181"
          - name: CLUSTER_DOMAIN
            value: {{ .Values.clusterDomain | quote }}
        ports:
          - name: kafka-client
            containerPort: 9092
          - name: kafka-internal
            containerPort: 9094
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: kafka-client
        volumeMounts:
          - name: data
            mountPath: /bitnami/kafka
          - name: metadata
            mountPath: /bitnami/kafka/metadata
          - name: scripts
            mountPath: /scripts/kafka-server-zk-setup.sh
            subPath: kafka-server-zk-setup.sh
          - name: kafka-config
            mountPath: /scripts/server.properties
            subPath: server.properties
          - name: tools
            mountPath: /tools/client-ssl.properties
            subPath: client-ssl.properties
          - name: tools
            mountPath: /tools/server-jaas.properties
            subPath: server-jaas.properties
      - name: jmx-exporter
        imagePullPolicy: {{ default "IfNotPresent" .Values.images.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
        command:
          - java
        args:
          - -XX:MaxRAMPercentage=100
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - "5556"
          - /etc/jmx-kafka/jmx-kafka-prometheus.yml
        ports:
          - name: metrics
            containerPort: 5556
        env:
          - name: SERVICE_PORT
            value: "5556"
        volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka

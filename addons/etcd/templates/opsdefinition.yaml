apiVersion: operations.kubeblocks.io/v1alpha1
kind: OpsDefinition
metadata:
  name: etcd-defragmentation
spec:
  preConditions:
    {{- .Files.Get "opsdefinitions/defragmentation.yaml" | nindent 4 }}
  podInfoExtractors:
    - name: etcdInfo
      podSelector:
        multiPodSelectionPolicy: Any
      env:
        - name: PEERS
          valueFrom:
            envRef:
              envName: PEERS
        - name: TMP_CONFIG_PATH
          valueFrom:
            envRef:
              envName: TMP_CONFIG_PATH
        - name: TLS_MOUNT_PATH
          valueFrom:
            envRef:
              envName: TLS_MOUNT_PATH
      volumeMounts:
        - name: tls
          mountPath: /etc/pki/tls
        - name: data
          mountPath: /var/run/etcd
  componentInfos:
    - componentDefinitionName: etcd
  actions:
    - name: etcd-defragmentation
      failurePolicy: Fail
      workload:
        type: Job
        backoffLimit: 2
        podInfoExtractorName: etcdInfo
        podSpec:
          containers:
            - name: etcd-defragmentation
              image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag.major3.minor5.patch6 }}
              imagePullPolicy: IfNotPresent
              command:
                - sh
                - -c
                - |
                  getClientProtocol() {
                    # check client tls if is enabled
                    line=$(grep 'advertise-client-urls' ${TMP_CONFIG_PATH})
                    if echo $line | grep -q 'https'; then
                      echo "https"
                    elif echo $line | grep -q 'http'; then
                      echo "http"
                    fi
                  }
                  
                  execEtcdctl() { 
                    local endpoints=$1
                    shift
                    clientProtocol=$(getClientProtocol)
                    tlsDir=$TLS_MOUNT_PATH
                    # check if the clientProtocol is https and the tlsDir is not empty
                    if [ $clientProtocol = "https" ] && [ -d "$tlsDir" ] && [ -s "${tlsDir}/ca.crt" ] && [ -s "${tlsDir}/tls.crt" ] && [ -s "${tlsDir}/tls.key" ]; then
                      etcdctl --endpoints=${endpoints} --cacert=${tlsDir}/ca.crt --cert=${tlsDir}/tls.crt --key=${tlsDir}/tls.key "$@"
                    elif [ $clientProtocol = "http" ]; then
                      etcdctl --endpoints=${endpoints} "$@"
                    else
                      echo "ERROR: bad etcdctl args: clientProtocol:${clientProtocol}, endpoints:${endpoints}, tlsDir:${tlsDir}, please check!"
                      exit 1
                    fi
                    # check if the etcdctl command was successful
                    if [ $? -ne 0 ]; then
                      echo "etcdctl command failed"
                      exit 1
                    fi
                  }

                  for PEER in $(echo $PEERS | tr ',' ' '); do
                    ENDPOINTS="${ENDPOINTS}${PEER}:2379,"
                  done
                  ENDPOINTS=${ENDPOINTS%,}
                  execEtcdctl "${ENDPOINTS}" defrag
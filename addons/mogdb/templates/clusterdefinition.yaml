apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: mogdb
  labels:
    {{- include "mogdb.labels" . | nindent 4 }}
spec:
  type: mogdb
  connectionCredential:
    username: kbadmin
    password: "$(STRONG_RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-mogdb)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-mogdb)"
  componentDefs:
    - name: mogdb
      workloadType: Stateful
      rsmSpec:
        roles:
          - name: Primary
            accessMode: ReadWrite
            isLeader: true
          - name: Standby
            accessMode: Readonly
            isLeader: false
        roleProbe:
          customHandler:
            - image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
              command:
                - /bin/bash
                - -c
                - |
                  role=$(gsql -h 127.0.0.1 -p 26000  -U ${MOGDB_USER} -W "${MOGDB_PASSWORD}" -dpostgres -t -c "select local_role from pg_stat_get_stream_replications() limit 1" | xargs echo -n)
                  if [ "$role"x == "Normal"x ]; then
                    echo -n "Primary"
                  else
                    echo -n $role
                  fi
      characterType: mogdb
      configSpecs:
        - name: mogdb-configuration
          templateRef: mogdb-configuration
          constraintRef: mogdb-cc
          keys:
            - postgresql.conf
          namespace: {{ .Release.Namespace }}
          volumeName: mogdb-config
          defaultMode: 0777
        - name: mogdb-custom-metrics
          templateRef: mogdb-custom-metrics
          namespace: {{ .Release.Namespace }}
          volumeName: mogdb-custom-metrics
          defaultMode: 0777
        - name: agamotto-configuration
          templateRef: mogdb-agamotto-configuration
          namespace: {{ .Release.Namespace }}
          volumeName: agamotto-configuration
          defaultMode: 0777
      scriptSpecs:
        - name: mogdb-scripts
          templateRef: mogdb-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 0777
      monitor:
        buildIn: false
        exporterConfig:
          scrapePath: /metrics
          scrapePort: {{ .Values.metrics.service.port }}
      logConfigs:
        {{- range $name,$pattern := .Values.logConfigs }}
        - name: {{ $name }}
          filePathPattern: {{ $pattern }}
        {{- end }}
      service:
        ports:
          - name: tcp-mogdb
            port: 26000
            targetPort: tcp-mogdb
      volumeTypes:
        - name: data
          type: data
        - name: log
          type: log
      podSpec:
        shareProcessNamespace: true
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        initContainers:
          - name: mogdb-tools
            image: {{ .Values.tools.image.registry | default .Values.tools.image.registry }}/{{ .Values.tools.image.repository }}:{{ .Values.tools.image.tag }}
            command:
              - bash
              - -c
              - |
                cp /bin/mscli /bin/gojq /mogdb_tools
            imagePullPolicy: {{ .Values.agent.image.pullPolicy | quote }}
            volumeMounts:
              - name: mogdb-tools
                mountPath: /mogdb_tools
        containers:
          - name: mogdb
            imagePullPolicy: {{ default .Values.image.pullPolicy "IfNotPresent" }}
            command:
              - bash
              - /kb-scripts/entrypoint-mogdb.sh
            securityContext:
              runAsUser: 0
            ports:
              - name: tcp-mogdb
                containerPort: 26000
            env:
              - name: GS_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
              - name: GS_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
              - name: GS_DB
                value: mogdb
              - name: PGPORT
                value: "26000"
              - name: PATH
                value: /usr/local/mogdb/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
              - name: GAUSSHOME
                value: /usr/local/mogdb
              - name: LD_LIBRARY_PATH
                value: /usr/local/mogdb/lib
              - name: PGDATA
                value: /var/lib/mogdb/data
              - name: PGHOST
                value: /var/lib/mogdb/tmp
              - name: PodIP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: MOGDB_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: MOGDB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
            volumeMounts:
              - name: data
                mountPath: /var/lib/mogdb
                subPath: mogdb
              - name: scripts
                mountPath: /kb-scripts
              - name: mogdb-config
                mountPath: /home/omm/conf
              - name: mogdb-tools
                mountPath: /mogdb_tools
              - name: ssh-key
                mountPath: /home/omm/ssh
            livenessProbe:
              exec:
                command:
                  - sh
                  - -c
                  - su -l omm -c "gsql -dpostgres -c 'select 1'"
              initialDelaySeconds: 120
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 12
            readinessProbe:
              exec:
                # Check we can execute queries over TCP (skip-networking is off).
                command:
                  - sh
                  - -c
                  - su -l omm -c "gsql -dpostgres -c 'select 1'"
              initialDelaySeconds: 30
              periodSeconds: 3
              timeoutSeconds: 5
          - name: agent
            image: {{ .Values.agent.image.registry | default .Values.agent.image.registry }}/{{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag }}
            imagePullPolicy: {{ .Values.agent.image.pullPolicy | quote }}
            securityContext:
              runAsUser: 70
              runAsGroup: 70
            ports:
              - name: agent-exporter
                containerPort: {{ .Values.agent.service.port }}
            volumeMounts:
              - name: data
                mountPath: /var/lib/mogdb
                subPath: mogdb
            env:
              - name: PGHOST
                value: {{ .Values.envs.PGHOST }}
              - name: PGDATA
                value: {{ .Values.envs.PGDATA }}
              - name: PGPORT
                value: {{ .Values.envs.PGPORT | quote }}
          - name: exporter
            image:  {{ .Values.metrics.image.registry | default .Values.image.registry }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
            imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
            securityContext:
              runAsUser: 70
            ports:
              - name: http-exporter
                containerPort: {{ .Values.metrics.service.port }}
            volumeMounts:
              - name: data
                mountPath: /var/lib/mogdb
                subPath: mogdb
            env:
              - name: DATA_SOURCE_NAME
                value: "host=/var/lib/mogdb/tmp port=26000 user=omm dbname=postgres"
              - name: PGHOST
                value: "/var/lib/mogdb/tmp"
              - name: PGPORT
                value: "26000"
              - name: PGDATA
                value: "/var/lib/mogdb/data"
            resources:
              requests:
                cpu: 100m
                memory: 100Mi
              limits:
                cpu: 100m
                memory: 100Mi
        volumes:
          - name: dshm
            emptyDir:
              medium: Memory
              {{- with .Values.shmVolume.sizeLimit }}
              sizeLimit: {{ . }}
              {{- end }}
          - name: mogdb-tools
            emptyDir: {}
          - name: ssh-key
            secret:
              secretName: mogdb-ssh-rsa-secret
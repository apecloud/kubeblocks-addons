apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: mogdb-5
  labels:
    {{- include "mogdb.labels" . | nindent 4 }}
spec:
  provider: kubeblocks
  description: MogDB
  serviceKind: mogdb
  serviceVersion: 5.0.5
  updateStrategy: Serial

  services:
  - name: default
    roleSelector: primary
    spec:
      ports:
        - name: tcp-mogdb
          port: 26000
          targetPort: tcp-mogdb

  configs:
    - name: mogdb-configuration
      templateRef: mogdb-configuration
      constraintRef: mogdb-cc
      keys:
        - postgresql.conf
      namespace: {{ .Release.Namespace }}
      volumeName: mogdb-config
      defaultMode: 0777

  scripts:
    - name: mogdb-scripts
      templateRef: mogdb-scripts
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0777

  exporter:
    containerName: exporter
    scrapePath: /metrics
    scrapePort: {{ .Values.metrics.service.port | quote}}

  logConfigs:
    {{- range $name,$pattern := .Values.logConfigs }}
    - name: {{ $name }}
      filePathPattern: {{ $pattern }}
    {{- end }}

  roles:
    - name: primary
      serviceable: true
      writable: true
    - name: secondary
      serviceable: false
      writable: false

  systemAccounts:
    - name: root
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        numSymbols: 2
        letterCase: MixedCases

  vars:
    - name: MOGDB_USER
      valueFrom:
        credentialVarRef:
          name: root
          optional: false
          username: Required
    - name: MOGDB_PASSWORD
      valueFrom:
        credentialVarRef:
          name: root
          optional: false
          password: Required

    - name: GS_USERNAME
      value: $(MOGDB_USER)
    - name: GS_PASSWORD
      value: $(MOGDB_PASSWORD)

  lifecycleActions:
    roleProbe:
      builtinHandler: custom
      customHandler:
        exec:
          command:
            - /bin/bash
            - -c
            - |
              role=$(gsql -h 127.0.0.1 -p 26000  -U ${MOGDB_USER} -W "${MOGDB_PASSWORD}" -dpostgres -t -c "select local_role from pg_stat_get_stream_replications() limit 1" | xargs echo -n)
              if [[ "$role"x == "Normal"x || "$role"x == "Primary"x ]]; then
                echo -n "primary"
              else
                echo -n "secondary"
              fi
  runtime:
    shareProcessNamespace: true
    securityContext:
      runAsUser: 0
      runAsGroup: 0
    containers:
      - name: mogdb
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command:
          - bash
          - -c
          - |
            set -ex
            MogDB_Role=
            REPL_CONN_INFO=

            cat >>/home/omm/.profile <<-EOF
            export OG_SUBNET="0.0.0.0/0"
            export PGHOST="/var/lib/mogdb/tmp"
            export PGPORT="$PGPORT"
            EOF
            [[ -d "$PGHOST" ]] || (mkdir -p $PGHOST && chown omm $PGHOST)

            hostname=$KB_POD_NAME
            [[ "$hostname" =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            if [[ $ordinal -eq 0 ]];then
              MogDB_Role="primary"
            else
              MogDB_Role="standby"

              pgport="5432"
              if [ -n "$PGPORT" ];then
                pgport="$PGPORT"
              fi
                ha_port=$(expr $pgport + 1)
                ha_service_port=$(expr $pgport + 2)

              cat >/tmp/replconninfo.conf

              replicas=$(eval echo ${KB_POD_LIST} | tr ',' '\n')
              SUBDOMAIN=${KB_CLUSTER_COMP_NAME}-headless
              for replica in ${replicas}; do
                host=${replica}.${SUBDOMAIN}
                host_ordinal=$(echo $replica | awk -F '-' '{print $(NF)}')
                if [ $host_ordinal -ge $ordinal ];then
                  break
                fi
                echo "$hostname $PodIP" |ncat --send-only $host 6543
                remote_ip=`ping $host -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'`
                echo "replconninfo$((host_ordinal+1)) = 'localhost=$PodIP localport=${ha_port} localservice=${ha_service_port} remotehost=$remote_ip remoteport=${ha_port} remoteservice=${ha_service_port}'" >> /tmp/replconninfo.conf
              done

              #echo "$hostname $PodIP" |ncat --send-only ${KB_CLUSTER_COMP_NAME}-0.${KB_CLUSTER_COMP_NAME}-headless 6543
              #remote_ip=`ping ${KB_CLUSTER_COMP_NAME}-0.${KB_CLUSTER_COMP_NAME}-headless -c 1 | sed '1{s/[^(]*(//;s/).*//;q}'`

              # REPL_CONN_INFO="replconninfo${ordinal} = 'localhost=$PodIP localport=${ha_port} localservice=${ha_service_port} remotehost=$remote_ip remoteport=${ha_port} remoteservice=${ha_service_port}'"
            fi

            [[ -n "$REPL_CONN_INFO" ]] && export REPL_CONN_INFO
            source /home/omm/.profile

            cp /home/omm/conf/* /tmp/
            chmod 777 /tmp/postgresql.conf /tmp/pg_hba.conf
            exec bash /kb-scripts/setup.sh -M "$MogDB_Role"
        securityContext:
          runAsUser: 0
        ports:
          - name: tcp-mogdb
            containerPort: 26000
        env:
          - name: GS_DB
            value: mogdb
          - name: PGPORT
            value: "26000"
          - name: PATH
            value: /usr/local/mogdb/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          - name: GAUSSHOME
            value: /usr/local/mogdb
          - name: LD_LIBRARY_PATH
            value: /usr/local/mogdb/lib
          - name: PGDATA
            value: /var/lib/mogdb/data
          - name: PGHOST
            value: /var/lib/mogdb/tmp
          - name: PodIP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
        volumeMounts:
          - name: data
            mountPath: /var/lib/mogdb
            subPath: mogdb
          - name: scripts
            mountPath: /kb-scripts
          - name: mogdb-config
            mountPath: /home/omm/conf
        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - su -l omm -c "gsql -dpostgres -c 'select 1'"
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command:
              - sh
              - -c
              - su -l omm -c "gsql -dpostgres -c 'select 1'"
          initialDelaySeconds: 30
          periodSeconds: 3
          timeoutSeconds: 5
      - name: helper
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        ports:
          - name: helper
            containerPort: 6543
        command:
          - bash
          - /kb-scripts/helper.sh
        env:
          - name: PodIP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PGDATA
            value: "/var/lib/mogdb/data"
          - name: PGHOST
            value: "/var/lib/mogdb/tmp"
          - name: PGPORT
            value: "26000"
        volumeMounts:
          - name: data
            mountPath: /var/lib/mogdb
            subPath: mogdb
          - name: scripts
            mountPath: /kb-scripts
        resources:
          requests:
            cpu: 500m
            memory: 64Mi
      - name: exporter
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
        securityContext:
          runAsUser: 70
        ports:
          - name: http-exporter
            containerPort: {{ .Values.metrics.service.port }}
        volumeMounts:
          - name: data
            mountPath: /var/lib/mogdb
            subPath: mogdb
        env:
          - name: DATA_SOURCE_NAME
            value: "host=/var/lib/mogdb/tmp port=26000 user=omm dbname=postgres"
          - name: PGHOST
            value: "/var/lib/mogdb/tmp"
          - name: PGPORT
            value: "26000"
          - name: PGDATA
            value: "/var/lib/mogdb/data"
          - name: SERVICE_PORT
            value: "{{ .Values.metrics.service.port }}"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
          {{- with .Values.shmVolume.sizeLimit }}
          sizeLimit: {{ . }}
          {{- end }}

apiVersion: apps.kubeblocks.io/v1
kind: ComponentDefinition
metadata:
  name: {{ include "orioledb.cmpdName" . }}
  labels:
    {{- include "orioledb.labels" . | nindent 4 }}
  annotations:
    {{- include "orioledb.annotations" . | nindent 4 }}
spec:
  provider: ApeCloud
  description: {{ .Chart.Description }}
  serviceKind: {{ .Chart.Name }}
  serviceVersion: {{ .Chart.AppVersion }}
  services:
    - name: default
      spec:
        ports:
          - name: tcp-orioledb
            port: 5432
            targetPort: tcp-orioledb
          - name: tcp-pgbouncer
            port: 6432
            targetPort: tcp-pgbouncer
  configs:
    - name: orioledb-configuration
      templateRef: {{ include "orioledb.configurationTemplate" . }}
      constraintRef: {{ include "orioledb.configConstraint" . }}
      keys:
        - postgresql.conf
      namespace: {{ .Release.Namespace }}
      volumeName: postgresql-config
      defaultMode: 0777
    - name: orioledb-pgbouncer-configuration
      templateRef: {{ include "orioledb-pgbouncer.configurationTemplate" . }}
      keys:
        - pgbouncer.ini
      namespace: {{ .Release.Namespace }}
      volumeName: pgbouncer-config
      defaultMode: 0777
    - name: orioledb-custom-metrics
      templateRef: {{ include "orioledb.metricsConfiguration" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: postgresql-custom-metrics
      defaultMode: 0777
    - name: agamotto-configuration
      templateRef: {{ include "orioledb.agamottoConfiguration" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: agamotto-configuration
      defaultMode: 0777
  scripts:
    - name: orioledb-scripts
      templateRef: {{ include "orioledb.scriptsTemplate" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0777
  logConfigs:
    {{- range $name,$pattern := .Values.logConfigs }}
    - name: {{ $name }}
      filePathPattern: {{ $pattern }}
    {{- end }}
  systemAccounts:
    - name: postgres
      initAccount: true
      passwordGenerationPolicy:
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
    - name: kbadmin
      statement: CREATE USER ${KB_ACCOUNT_NAME} SUPERUSER PASSWORD '${KB_ACCOUNT_PASSWORD}';
      passwordGenerationPolicy: &defaultPasswdGenerationPolicy
        length: 10
        numDigits: 5
        numSymbols: 0
        letterCase: MixedCases
    - name: kbdataprotection
      statement: CREATE USER ${KB_ACCOUNT_NAME} SUPERUSER PASSWORD '${KB_ACCOUNT_PASSWORD}';
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbprobe
      statement: CREATE USER ${KB_ACCOUNT_NAME} WITH PASSWORD '${KB_ACCOUNT_PASSWORD}';  GRANT pg_monitor TO ${KB_ACCOUNT_NAME};
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbmonitoring
      statement: CREATE USER ${KB_ACCOUNT_NAME} WITH PASSWORD '${KB_ACCOUNT_PASSWORD}';  GRANT pg_monitor TO ${KB_ACCOUNT_NAME};
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
    - name: kbreplicator
      statement: CREATE USER ${KB_ACCOUNT_NAME} WITH REPLICATION PASSWORD '${KB_ACCOUNT_PASSWORD}';
      passwordGenerationPolicy: *defaultPasswdGenerationPolicy
  tls:
    volumeName: tls
    mountPath: /etc/pki/tls
    caFile: ca.pem
    certFile: cert.pem
    keyFile: key.pem
  serviceRefDeclarations:
    - name: etcd
      serviceRefDeclarationSpecs:
        - serviceKind: etcd
          serviceVersion: "^*"
      optional: true
  vars:
    - name: CLUSTER_NAME
      valueFrom:
        clusterVarRef:
          clusterName: Required
    - name: CLUSTER_NAMESPACE
      valueFrom:
        clusterVarRef:
          namespace: Required
    - name: POSTGRES_COMPONENT_NAME
      valueFrom:
        componentVarRef:
          optional: false
          componentName: Required
    - name: POSTGRES_COMPONENT_SHORT_NAME
      valueFrom:
        componentVarRef:
          optional: false
          shortName: Required
    - name: POSTGRES_USER
      valueFrom:
        credentialVarRef:
          name: postgres
          optional: false
          username: Required
    - name: POSTGRES_PASSWORD
      valueFrom:
        credentialVarRef:
          name: postgres
          optional: false
          password: Required
    - name: POSTGRES_POD_NAME_LIST
      valueFrom:
        componentVarRef:
          optional: false
          podNames: Required
    - name: POSTGRES_POD_FQDN_LIST
      valueFrom:
        componentVarRef:
          optional: false
          podFQDNs: Required
    - name: POSTGRES_PRIMARY_POD_NAME
      valueFrom:
        componentVarRef:
          optional: true
          podNamesForRole:
            role: primary
            option: Optional
    - name: PATRONI_DCS_ETCD_VERSION
      value: "3"
    - name: PATRONI_DCS_ETCD_SERVICE_ENDPOINT
      valueFrom:
        serviceRefVarRef:
          name: etcd
          endpoint: Required
          optional: true
    - name: TLS_ENABLED
      valueFrom:
        tlsVarRef:
          enabled: Optional
  volumes:
    - name: data
      needSnapshot: true
  lifecycleActions:
    switchover:
      exec:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        container: postgresql
        command: [ "/kb-scripts/switchover.sh" ]
        env:
          - name: CURRENT_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
    accountProvision:
      exec:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        container: postgresql
        command:
          - bash
          - -c
          - |
            eval statement=\"${KB_ACCOUNT_STATEMENT}\"
            psql -h 127.0.0.1 -c "${statement}"
        env:
          - name: PGUSER
            value: $(POSTGRES_USER)
          - name: PGPASSWORD
            value: $(POSTGRES_PASSWORD)
        targetPodSelector: Role
        matchingKey: primary
  runtime:
    securityContext:
      runAsUser: 0
      fsGroup: 103
      runAsGroup: 103
    initContainers:
      - name: pg-init-container
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command:
          - /kb-scripts/postgres-pre-setup.sh
        volumeMounts:
          - name: data
            mountPath: /home/postgres/pgdata
          - name: postgresql-config
            mountPath: /home/postgres/conf
          - name: scripts
            mountPath: /kb-scripts
      - command:
          - cp
          - -r
          - /bin/dbctl
          - /config
          - /tools/
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.dbctl.repository }}:{{ .Values.image.dbctl.tag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        name: init-dbctl
        volumeMounts:
          - mountPath: /tools
            name: tools
    containers:
      - name: postgresql
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
        command:
          - bin/bash
          - -c
          - /kb-scripts/postgres-setup.sh
        securityContext:
          runAsUser: 0
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          exec:
            command:
              - /bin/sh
              - -c
              - -ee
              - |
                exec pg_isready -U {{ default "postgres" | quote }} -h 127.0.0.1 -p 5432
                [ -f /postgresql/tmp/.initialized ] || [ -f /postgresql/.initialized ]
        volumeMounts:
          - name: dshm
            mountPath: /dev/shm
          - name: data
            mountPath: /home/postgres/pgdata
          - name: postgresql-config
            mountPath: /home/postgres/conf
          - name: scripts
            mountPath: /kb-scripts
        ports:
          - name: tcp-orioledb
            containerPort: 5432
          - name: patroni
            containerPort: 8008
        env: ## refer https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst
          - name: DCS_ENABLE_KUBERNETES_API
            value: "true"
          - name: KUBERNETES_USE_CONFIGMAPS
            value: "true"
          - name: SCOPE
            value: $(POSTGRES_COMPONENT_NAME)
          - name: KUBERNETES_SCOPE_LABEL
            value: "apps.kubeblocks.postgres.patroni/scope"
          - name: KUBERNETES_ROLE_LABEL
            value: "apps.kubeblocks.postgres.patroni/role"
          - name: KUBERNETES_LABELS
            value: '{"app.kubernetes.io/managed-by":"kubeblocks","app.kubernetes.io/instance":"$(CLUSTER_NAME)","apps.kubeblocks.io/component-name":"$(POSTGRES_COMPONENT_SHORT_NAME)","apps.kubeblocks.postgres.patroni/scope":"$(POSTGRES_COMPONENT_NAME)"}'
          - name: RESTORE_DATA_DIR
            value: /home/postgres/pgdata/kb_restore
          - name: KB_PG_CONFIG_PATH
            value: /home/postgres/conf/postgresql.conf
          - name: ALLOW_NOSSL
            value: "true"
          - name: SPILO_CONFIGURATION
            value: | ## https://github.com/zalando/patroni#yaml-configuration
              bootstrap:
                initdb:
                  - auth-host: md5
                  - auth-local: trust
          - name: ALLOW_NOSSL
            value: "true"
          - name: PGROOT
            value: /home/postgres/pgdata/pgroot
          - name: PGDATA
            value: /home/postgres/pgdata/pgroot/data
          - name: CURRENT_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: PGUSER_SUPERUSER
            value: $(POSTGRES_USER)
          - name: PGPASSWORD_SUPERUSER
            value: $(POSTGRES_PASSWORD)
          - name: PGUSER_ADMIN
            value: superadmin
          - name: PGPASSWORD_ADMIN
            value: $(POSTGRES_PASSWORD)
          - name: PGUSER_STANDBY
            value: standby
          - name: PGPASSWORD_STANDBY
            value: $(POSTGRES_PASSWORD)
          - name: PGUSER
            value: $(POSTGRES_USER)
      - name: pgbouncer
        image: {{ .Values.pgbouncer.image.registry | default ( .Values.image.registry | default "docker.io" ) }}/{{ .Values.pgbouncer.image.repository }}:{{ .Values.pgbouncer.image.tag }}
        imagePullPolicy: {{ .Values.pgbouncer.image.pullPolicy | quote }}
        securityContext:
          runAsUser: 0
        ports:
          - name: tcp-pgbouncer
            containerPort: 6432
        volumeMounts:
          - name: pgbouncer-config
            mountPath: /home/pgbouncer/conf
          - name: scripts
            mountPath: /kb-scripts
        command:
          - /kb-scripts/pgbouncer-setup.sh
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: tcp-pgbouncer
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
          tcpSocket:
            port: tcp-pgbouncer
        env:
          - name: PGBOUNCER_AUTH_TYPE
            value: md5
          - name: POSTGRESQL_USERNAME
            value: $(POSTGRES_USER)
          - name: POSTGRESQL_PASSWORD
            value: $(POSTGRES_PASSWORD)
          - name: POSTGRESQL_PORT
            value: "5432"
          - name: POSTGRESQL_HOST
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PGBOUNCER_PORT
            value: "6432"
          - name: PGBOUNCER_BIND_ADDRESS
            value: "0.0.0.0"
          - name: CURRENT_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: CURRENT_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: CURRENT_POD_HOST_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.hostIP
      - name: metrics
        image: {{ .Values.metrics.image.registry | default ( .Values.image.registry | default "docker.io" ) }}/{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}
        imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
        securityContext:
          runAsUser: 0
        env:
          - name: ENDPOINT
            value: {{ printf "127.0.0.1:5432" }}
          - name: DATA_SOURCE_PASS
            value: $(POSTGRES_PASSWORD)
          - name: DATA_SOURCE_USER
            value: $(POSTGRES_USER)
        command:
          - "/bin/agamotto"
          - "--config=/opt/agamotto/agamotto-config.yaml"
        ports:
          - name: http-metrics
            containerPort: {{ .Values.metrics.service.port }}
        volumeMounts:
          - name: postgresql-custom-metrics
            mountPath: /opt/conf
          - name: agamotto-configuration
            mountPath: /opt/agamotto
    volumes:
      - name: dshm
        emptyDir:
          medium: Memory
          {{- with .Values.shmVolume.sizeLimit }}
          sizeLimit: {{ . }}
          {{- end }}
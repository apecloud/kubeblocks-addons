apiVersion: apps.kubeblocks.io/v1alpha1
kind: ClusterDefinition
metadata:
  name: official-postgresql
  labels:
    {{- include "official-postgresql.labels" . | nindent 4 }}
spec:
  type: postgresql
  connectionCredential:
    username: postgres
    password: "$(RANDOM_PASSWD)"
    endpoint: "$(SVC_FQDN):$(SVC_PORT_tcp-postgresql)"
    host: "$(SVC_FQDN)"
    port: "$(SVC_PORT_tcp-postgresql)"
  componentDefs:
    - name: postgresql
      workloadType: Replication
      characterType: postgresql
      probes:
        roleProbe:
          failureThreshold: {{ .Values.roleProbe.failureThreshold }}
          periodSeconds: {{ .Values.roleProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.roleProbe.timeoutSeconds }}
      configSpecs:
        - name: official-postgresql-configuration
          templateRef: official-postgresql14-configuration
          constraintRef: official-postgresql14-cc
          keys:
            - postgresql.conf
          namespace: {{ .Release.Namespace }}
          volumeName: postgresql-config
          defaultMode: 0444
      scriptSpecs:
        - name: official-postgresql-scripts
          templateRef: official-postgresql-scripts
          namespace: {{ .Release.Namespace }}
          volumeName: scripts
          defaultMode: 0555
      service:
        ports:
          - name: tcp-postgresql
            port: 5432
            targetPort: tcp-postgresql
      volumeTypes:
        - name: data
          type: data
      podSpec:
        initContainers:
          - name: init-syncer
            image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.syncer.repository }}:{{ .Values.image.syncer.tag }}
            imagePullPolicy: Always
            command:
              - sh
              - -c
              - "cp -r /bin/syncer /config /kubeblocks/"
            volumeMounts:
              - name: kubeblocks
                mountPath: /kubeblocks
        securityContext:
          runAsUser: 0
          fsGroup: 103
          runAsGroup: 103
        containers:
          - name: postgresql
            imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy }}
            securityContext:
              runAsUser: 0
            command:
              - /kubeblocks/syncer
              - --config-path
              - /kubeblocks/config/components
              - --port
              - "3601"
              - --
              - docker-entrypoint.sh
              - --config-file={{ .Values.confPath }}/postgresql.conf
              - --hba_file={{ .Values.confPath }}/pg_hba.conf
            volumeMounts:
              - name: dshm
                mountPath: /dev/shm
              - name: data
                mountPath: {{ .Values.dataMountPath }}
              - name: postgresql-config
                mountPath: {{ .Values.confMountPath }}
              - name: scripts
                mountPath: /kb-scripts
              - name: kubeblocks
                mountPath: /kubeblocks
            ports:
              - name: tcp-postgresql
                containerPort: 5432
            env:
              - name: ALLOW_NOSSL
                value: "true"
              - name: POSTGRESQL_PORT_NUMBER
                value: "5432"
              - name: PGDATA
                value: {{ .Values.dataPath }}
              - name: PGCONF
                value: {{ .Values.confPath }}
              - name: POSTGRESQL_MOUNTED_CONF_DIR
                value: {{ .Values.confMountPath }}
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: status.podIP
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: POSTGRES_USER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
              - name: PGUSER
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: username
                    optional: false
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: $(CONN_CREDENTIAL_SECRET_NAME)
                    key: password
                    optional: false
        volumes:
          - name: dshm
            emptyDir:
              medium: Memory
              {{- with .Values.shmVolume.sizeLimit }}
              sizeLimit: {{ . }}
              {{- end }}
      systemAccounts:
        cmdExecutorConfig:
          image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.repository }}:{{ default .Values.image.tag }}
          command:
            - psql
          args:
            - -h$(KB_ACCOUNT_ENDPOINT)
            - -c
            - $(KB_ACCOUNT_STATEMENT)
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: $(CONN_CREDENTIAL_SECRET_NAME)
                  key: username
                  optional: false
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: $(CONN_CREDENTIAL_SECRET_NAME)
                  key: password
                  optional: false
        passwordConfig:
          length: 10
          numDigits: 5
          numSymbols: 0
          letterCase: MixedCases
        accounts:
          - name: kbadmin
            provisionPolicy: &kbAdminAcctRef
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) SUPERUSER PASSWORD '$(PASSWD)';
                update: ALTER USER $(USERNAME) WITH PASSWORD '$(PASSWD)';
          - name: kbdataprotection
            provisionPolicy: *kbAdminAcctRef
          - name: kbprobe
            provisionPolicy: &kbReadonlyAcctRef
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) WITH PASSWORD '$(PASSWD)';  GRANT pg_monitor TO $(USERNAME);
                update: ALTER USER $(USERNAME) WITH PASSWORD '$(PASSWD)';
          - name: kbmonitoring
            provisionPolicy: *kbReadonlyAcctRef
          - name: kbreplicator
            provisionPolicy:
              type: CreateByStmt
              scope: AnyPods
              statements:
                creation: CREATE USER $(USERNAME) WITH REPLICATION PASSWORD '$(PASSWD)';
                update: ALTER USER $(USERNAME) WITH PASSWORD '$(PASSWD)';

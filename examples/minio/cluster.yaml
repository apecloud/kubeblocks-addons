apiVersion: apps.kubeblocks.io/v1
kind: Cluster
metadata:
  name: minio-cluster
  namespace: default
spec:
  # Specifies the behavior when a Cluster is deleted.
  # Valid options are: [DoNotTerminate, Delete, WipeOut] (`Halt` is deprecated since KB 0.9)
  # - `DoNotTerminate`: Prevents deletion of the Cluster. This policy ensures that all resources remain intact.
  # - `Delete`: Extends the `Halt` policy by also removing PVCs, leading to a thorough cleanup while removing all persistent data.
  # - `WipeOut`: An aggressive policy that deletes all Cluster resources, including volume snapshots and backups in external storage. This results in complete data removal and should be used cautiously, primarily in non-production environments to avoid irreversible data loss.
  terminationPolicy: Delete
  componentSpecs:
    - componentDef: minio
      name: minio
      # for dev/test, set replicas to 2
      # for prod , MinIO clusters must be configured with at least 4 replicas
      # and the number of nodes must also be a multiple of 2 (e.g., 4, 6, 8, 12, etc.)
      # to maintain balanced erasure coding.
      replicas: 2
      # following is an simple example of schedulingPolicy
      # which requires pods from the same component `minio` cannot be scheduled to the same node
      # --- start of example
      # schedulingPolicy:
      #   affinity:
      #     podAntiAffinity:
      #       preferredDuringSchedulingIgnoredDuringExecution:
      #         - podAffinityTerm:
      #             labelSelector:
      #               matchLabels:
      #                 app.kubernetes.io/instance: minio-cluster
      #                 apps.kubeblocks.io/component-name: minio
      #             topologyKey: kubernetes.io/hostname
      #           weight: 100
      #       requiredDuringSchedulingIgnoredDuringExecution:
      #         - labelSelector:
      #             matchLabels:
      #               app.kubernetes.io/instance: minio-cluster
      #               apps.kubeblocks.io/component-name: minio
      #           topologyKey: kubernetes.io/hostname
      # --- end of example
      env:
        # MINIO_BUCKETS is a comma-separated list of bucket names that will be automatically
        # created during MinIO initialization. Example: "data,backup,logs"
        - name: MINIO_BUCKETS
          value:
      resources:
        limits:
          cpu: "1"
          memory: "1Gi"
        requests:
          cpu: "1"
          memory: "1Gi"
      # Specifies a list of PersistentVolumeClaim templates that define the storage
      # requirements for the Component.
      volumeClaimTemplates:
        # Refers to the name of a volumeMount defined in
        # `componentDefinition.spec.runtime.containers[*].volumeMounts
        - name: data
          spec:
            # The name of the StorageClass required by the claim.
            # If not specified, the StorageClass annotated with
            # `storageclass.kubernetes.io/is-default-class=true` will be used by default
            storageClassName: ""
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                # Set the storage size as needed
                storage: 20Gi

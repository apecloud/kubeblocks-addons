local.file_match "mysql_logs" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/local-path-provisioner/*/log/mysqld-error.log*",
		job         = "mysql-logs",
	}]
}

loki.process "mysql_logs" {
	forward_to = [loki.write.default.receiver]

	stage.match {
		selector = "{job=\"mysql-logs\"}"

		stage.regex {
			expression = "/var/local-path-provisioner/(?P<pvc_name>pvc-[^_]+)_(?P<namespace>[^_]+)_data-(?P<pod_name>[^/]+)/log/mysqld-error.log.*"
			source     = "filename"
		}

		stage.labels {
			values = {
				namespace = null,
				pod_name  = null,
			}
		}
	}

	stage.regex {
		expression = "^(?P<timestamp>[^ ]+) (?P<thread_id>\\d+) \\[(?P<level>[^\\]]+)\\] \\[(?P<error_code>[^\\]]+)\\] \\[(?P<source>[^\\]]+)\\] (?P<message>.*)$"
	}

	stage.timestamp {
		source = "timestamp"
		format = "RFC3339Nano"
	}

	stage.labels {
		values = {
			error_code = null,
			level      = null,
		}
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.output {
		source = "message"
	}
}

loki.source.file "mysql_logs" {
	targets               = local.file_match.mysql_logs.targets
	forward_to            = [loki.process.mysql_logs.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

local.file_match "mysql_slowlogs" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/local-path-provisioner/*/log/mysqld-slowquery.log*",
		job         = "mysql-slowlogs",
	}]
}

loki.process "mysql_slowlogs" {
	forward_to = [loki.write.default.receiver]

	stage.multiline {
		firstline     = "#\\sTime:.*"
		max_lines     = 0
		max_wait_time = "30s"
	}

	stage.regex {
		expression = "#\\s*Time:\\s*(?P<timestamp>.*)\\n#\\s*User@Host:\\s*(?P<user>[^\\[]+).*@\\s*(?P<host>.*]).*Id:\\s*(?P<id>\\d+)\\n#\\s*Query_time:\\s*(?P<query_time>\\d+\\.\\d+)\\s*Lock_time:\\s*(?P<lock_time>\\d+\\.\\d+)\\s*Rows_sent:\\s*(?P<rows_sent>\\d+)\\s*Rows_examined:\\s*(?P<rows_examined>\\d+)\\n(?P<query>(?s:.*))$"
	}

	stage.labels {
		values = {
			host          = null,
			id            = null,
			lock_time     = null,
			query_time    = null,
			rows_examined = null,
			rows_sent     = null,
			timestamp     = null,
			user          = null,
		}
	}

	stage.drop {
		drop_counter_reason = "drop empty lines"
		expression          = "^ *$"
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.output {
		source = "query"
	}
}

loki.source.file "mysql_slowlogs" {
	targets               = local.file_match.mysql_slowlogs.targets
	forward_to            = [loki.process.mysql_slowlogs.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

local.file_match "mysql_csi_logs" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/lib/kubelet/pods/*/volumes/kubernetes.io~csi/*/mount/log/mysqld-error.log*",
		job         = "mysql-csi-logs",
	}]
}

loki.process "mysql_csi_logs" {
	forward_to = [loki.write.default.receiver]

	stage.match {
		selector = "{job=\"mysql-csi-logs\"}"

		stage.regex {
			expression = "/var/lib/kubelet/pods/(?P<pod_uid>[^/]+)/volumes/kubernetes.io~csi/(?P<pvc_name>[^/]+)/mount/log/mysqld-error.log.*"
			source     = "filename"
		}

		stage.labels {
			values = {
				pod_uid  = null,
				pvc_name = null,
			}
		}
	}

	stage.regex {
		expression = "^(?P<timestamp>[^ ]+) (?P<thread_id>\\d+) \\[(?P<level>[^\\]]+)\\] \\[(?P<error_code>[^\\]]+)\\] \\[(?P<source>[^\\]]+)\\] (?P<message>.*)$"
	}

	stage.timestamp {
		source = "timestamp"
		format = "RFC3339Nano"
	}

	stage.labels {
		values = {
			error_code = null,
			level      = null,
		}
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.output {
		source = "message"
	}
}

loki.source.file "mysql_csi_logs" {
	targets               = local.file_match.mysql_csi_logs.targets
	forward_to            = [loki.process.mysql_csi_logs.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

local.file_match "mysql_csi_slowlogs" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/lib/kubelet/pods/*/volumes/kubernetes.io~csi/*/mount/log/mysqld-slowquery.log*",
		job         = "mysql-csi-slowlogs",
	}]
}

loki.process "mysql_csi_slowlogs" {
	forward_to = [loki.write.default.receiver]

	stage.multiline {
		firstline     = "#\\sTime:.*"
		max_lines     = 0
		max_wait_time = "30s"
	}

	stage.regex {
		expression = "#\\s*Time:\\s*(?P<timestamp>.*)\\n#\\s*User@Host:\\s*(?P<user>[^\\[]+).*@\\s*(?P<host>.*]).*Id:\\s*(?P<id>\\d+)\\n#\\s*Query_time:\\s*(?P<query_time>\\d+\\.\\d+)\\s*Lock_time:\\s*(?P<lock_time>\\d+\\.\\d+)\\s*Rows_sent:\\s*(?P<rows_sent>\\d+)\\s*Rows_examined:\\s*(?P<rows_examined>\\d+)\\n(?P<query>(?s:.*))$"
	}

	stage.labels {
		values = {
			host          = null,
			id            = null,
			lock_time     = null,
			query         = null,
			query_time    = null,
			rows_examined = null,
			rows_sent     = null,
			timestamp     = null,
			user          = null,
		}
	}

	stage.drop {
		drop_counter_reason = "drop empty lines"
		expression          = "^ *$"
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.output {
		source = "query"
	}
}

loki.source.file "mysql_csi_slowlogs" {
	targets               = local.file_match.mysql_csi_slowlogs.targets
	forward_to            = [loki.process.mysql_csi_slowlogs.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

local.file_match "mysql_audit_logs" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/local-path-provisioner/*/auditlog/audit.log*",
		job         = "mysql-audit-logs",
	}]
}

loki.process "mysql_audit_logs" {
	forward_to = [loki.write.default.receiver]

	stage.match {
		selector = "{job=\"mysql-audit-logs\"}"

		stage.regex {
			expression = "/var/local-path-provisioner/(?P<pvc_name>pvc-[^_]+)_(?P<namespace>[^_]+)_data-(?P<pod_name>[^/]+)/auditlog/audit.log.*"
			source     = "filename"
		}

		stage.labels {
			values = {
				namespace = null,
				pod_name  = null,
			}
		}
	}

	stage.multiline {
		firstline = "^\\s*<AUDIT_RECORD"
		max_lines = 0
	}

	stage.regex {
		expression = "<AUDIT_RECORD\\s+NAME=\"(?P<name>[^\"]+)\"\\s+RECORD=\"(?P<record>[^\"]+)\"\\s+TIMESTAMP=\"(?P<timestamp>[^\"]+)\"\\s+COMMAND_CLASS=\"(?P<command_class>[^\"]+)\"\\s+CONNECTION_ID=\"(?P<connection_id>[^\"]+)\"\\s+STATUS=\"(?P<status>[^\"]+)\"\\s+SQLTEXT=\"(?P<sqltext>[^\"]+)\"\\s+USER=\"(?P<user>[^\"]+)\"\\s+HOST=\"(?P<host>[^\"]*)\"\\s+OS_USER=\"(?P<os_user>[^\"]*)\"\\s+IP=\"(?P<ip>[^\"]*)\"\\s+DB=\"(?P<db>[^\"]*)\"\\s*\\/>"
	}

	stage.labels {
		values = {
			command_class = "command_class",
			connection_id = "connection_id",
			db            = "db",
			host          = "host",
			ip            = "ip",
			name          = "name",
			os_user       = "os_user",
			record        = "record",
			sqltext       = "sqltext",
			status        = "status",
			timestamp     = "timestamp",
			user          = "user",
		}
	}

	stage.label_drop {
		values = ["filename"]
	}

	stage.output {
		source = "sqltext"
	}
}

loki.source.file "mysql_audit_logs" {
	targets               = local.file_match.mysql_audit_logs.targets
	forward_to            = [loki.process.mysql_audit_logs.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

loki.write "default" {
	endpoint {
		url = "http://loki-stack.logging:3100/loki/api/v1/push"
	}
	external_labels = {}
}
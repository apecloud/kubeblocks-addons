apiVersion: apps.kubeblocks.io/v1
kind: Cluster
metadata:
  name: clickhouse-cluster
  namespace: demo
spec:
  # Specifies the name of the ClusterDef to use when creating a Cluster.
  clusterDef: clickhouse
  # Specifies the clickhouse cluster topology defined in ClusterDefinition.Spec.topologies.
  # - `standalone`: single clickhouse instance
  # - `cluster`: clickhouse with ClickHouse Keeper as coordinator
  topology: cluster
  # Specifies the behavior when a Cluster is deleted.
  # - `DoNotTerminate`: Prevents deletion of the Cluster. This policy ensures that all resources remain intact.
  # - `Delete`: Extends the `Halt` policy by also removing PVCs, leading to a thorough cleanup while removing all persistent data.
  # - `WipeOut`: An aggressive policy that deletes all Cluster resources, including volume snapshots and backups in external storage. This results in complete data removal and should be used cautiously, primarily in non-production environments to avoid irreversible data loss.
  terminationPolicy: Delete
  # Specifies a list of ClusterComponentSpec objects used to define the individual components that make up a Cluster. This field allows for detailed configuration of each component within the Cluster.
  # Note: `shardingSpecs` and `componentSpecs` cannot both be empty; at least one must be defined to configure a cluster.
  # ClusterComponentSpec defines the specifications for a Component in a Cluster.
  componentSpecs:
    - name: ch-keeper
      componentDef: clickhouse-keeper-1
      replicas: 1
      resources:
        limits:
          cpu: '0.5'
          memory: 1Gi
        requests:
          cpu: '0.5'
          memory: 1Gi
      systemAccounts:
        - name: admin
          secretRef:
            name: udf-account-info
            namespace: demo
      volumeClaimTemplates:
        - name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
  shardings:
    - name: clickhouse
      shards: 2 # with 2 shard
      template:
        name: clickhouse  # each shard is a clickhouse component, with 2 replicas
        componentDef: clickhouse-1
        replicas: 2
        systemAccounts:
          - name: admin # name of the system account
            secretRef:
              name: udf-account-info
              namespace: demo
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeClaimTemplates:
          - name: data
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 20Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: udf-account-info
  namespace: demo  # optional
type: Opaque
data:
  password: cGFzc3dvcmQxMjM=  # 'password123' in base64